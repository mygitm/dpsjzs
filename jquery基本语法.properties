function myAddEvent(obj, sEv, fn) {
    // 兼容IE写法,attachEvent会把绑定函数的this换成window
    if (obj.attachEvent) {
        // 在 attachEvent 方法中，事件是以 “on” 开头的
        obj.attachEvent('on' + sEv, function () {
            // 行间、套一层、定时器、绑定这四种情况不能直接用this
            // call()调用比普通的函数参数调用多一个参数就是this
 
            // 在执行函数时将obj传入替换this(此处为window)
            // fn如果要传参数，可以这样fn.call(obj,a,b)
 
            // 当调用fn.call(obj)返回的是false时
            if (false == fn.call(obj)) {
 
                // fn.apply(obj,[a,b])
                // call与apply第一个参数都为this,applay第二个参数为一个数组
 
                // 阻止事件冒泡
                event.cancelBubble = true;
 
                // 阻止事件默认
                return false;
            }
        });
    } else {
        obj.addEventListener(sEv, function (ev) {
 
            if (false == fn.call(obj)) {
 
                // 阻止事件冒泡
                ev.cancelBubble = true;
                // 阻止事件默认
                ev.preventDefault();
            }
        }, false);
    }
}
 
 
// 通过父级与class名获取元素(兼容性好)
function getByClass(oParent, sClass) {
    var aEle = oParent.getElementsByTagName('*');
    var aResult = [];
    var i = 0;
 
    for (i = 0; i < aEle.length; i++) {
        if (aEle[i].className == sClass) {
            aResult.push(aEle[i]);
        }
    }
 
    return aResult;
}
 
// 获取传入对象的属性
function getStyle(obj, attr) {
    if (obj.currentStyle) {
        return obj.currentStyle[attr];
    } else {
        return getComputedStyle(obj, false)[attr];
    }
}
 
 
 
// 选择对象方法
function VQuery(vArg) {
    // 用来保存选中的元素
    this.elements = [];
 
    // 判断传入的参数
    switch (typeof vArg) {
        // 如果是方法
        case 'function':
            // window.οnlοad=vArg;
            myAddEvent(window, 'load', vArg);
            break;
        // 如果是字符串
        case 'string':
            // 判断传入字符串的第一个字符
            switch (vArg.charAt(0)) {
                // ID
                case '#':
                    var obj = document.getElementById(vArg.substring(1));
                    this.elements.push(obj);
                    break;
                // class
                case '.':
                    this.elements = getByClass(document, vArg.substring(1));
                    break;
                // tagName
                default:
                    this.elements = document.getElementsByTagName(vArg);
            }
            break;
        // 如果是对象
        case 'object':
            this.elements.push(vArg);
    }
}
 
// 为VQuery加上click事件
VQuery.prototype.click = function (fn) {
    var i = 0;
    for (i = 0; i < this.elements.length; i++) {
        // 为每一个选择的元素添加click方法
        myAddEvent(this.elements[i], 'click', fn);
    }
 
    return this;
};
 
 
// 为VQuery添加显示方法
VQuery.prototype.show = function () {
    var i = 0;
    for (i = 0; i < this.elements.length; i++) {
        this.elements[i].style.display = 'block';
    }
 
    return this;
};
 
 
// 为VQuery添加隐藏方法
VQuery.prototype.hide = function () {
    var i = 0;
 
    for (i = 0; i < this.elements.length; i++) {
        this.elements[i].style.display = 'none';
    }
 
    return this;
};
 
// 为VQuery添加鼠标移入移出方法
VQuery.prototype.hover = function (fnOver, fnOut) {
    var i = 0;
    for (i = 0; i < this.elements.length; i++) {
        // 鼠标移入时执行第一个回调函数
        myAddEvent(this.elements[i], 'mouseover', fnOver);
        // 鼠标移出时执行第二个回调函数
        myAddEvent(this.elements[i], 'mouseout', fnOut);
    }
    return this;
};
 
 
// 设置与获取样式属性
VQuery.prototype.css = function (attr, value) {
    // 设置样式
    if (arguments.length == 2) {
        var i = 0;
        for (i = 0; i < this.elements.length; i++) {
            this.elements[i].style[attr] = value;
        }
 
    } else {
         // 获取样式
         if (typeof attr == 'string') {
            // return this.elements[0].style[attr];
            // style只能获取行间样式,只能用getStyle来获取样式
            return getStyle(this.elements[0], attr);
            // 批量设置样式(传入类型为对象格式)
        } else {
            for (i = 0; i < this.elements.length; i++) {
                var k = '';
 
                for (k in attr) {
                    this.elements[i].style[k] = attr[k];
                }
            }
        }
    }
    // 在调用函数后返回this实现链式调用
    return this;
};
 
 
 
// 设置与获取属性
VQuery.prototype.attr = function (attr, value) {
    // 如果传入的参数为两个
    if (arguments.length == 2) {
        var i = 0;
        // 设置属性
        for (i = 0; i < this.elements.length; i++) {
            this.elements[i][attr] = value;
        }
        // 如果传放的为一个参数
    } else {
        // 获取属性
        return this.elements[0][attr];
    }
 
    return this;
};
 
 
// 点击切换方法，一般会传两个函数(hide与show)
VQuery.prototype.toggle = function () {
    var i = 0;
    // 将toggle()的参数转存
    var _arguments = arguments;
 
    for (i = 0; i < this.elements.length; i++) {
        addToggle(this.elements[i]);
    }
 
    function addToggle(obj) {
        // count变量不能扔在外面，否则无法分别计数
        var count = 0;
        myAddEvent(obj, 'click', function () {
            // 分别执行toggle()传入的参数,用count模传入参数的length,然后将count加1
            // 用call替换执行函数的this
            _arguments[count++ % _arguments.length].call(obj);
        });
    }
 
    return this;
};
 
 
// 获取选择的当前对像集合中的某一个元素
VQuery.prototype.eq = function (n) {
    // 要加$()进行包装，以适应添加的方法
    return $(this.elements[n]);
};
 
 
function appendArr(arr1, arr2) {
    var i = 0;
 
    for (i = 0; i < arr2.length; i++) {
        arr1.push(arr2[i]);
    }
}
 
// 添加当前对象查找子节点的方法
VQuery.prototype.find = function (str) {
    var i = 0;
    var aResult = [];
 
    for (i = 0; i < this.elements.length; i++) {
        switch (str.charAt(0)) {
            // class
            case '.':
                // 查找当前对象集合中，含有指定class的对象集合	
                var aEle = getByClass(this.elements[i], str.substring(1));
                // 结果打散拼接
                aResult = aResult.concat(aEle);
                break;
            // 标签
            default:
                var aEle = this.elements[i].getElementsByTagName(str);
 
                // aResult=aResult.concat(aEle);
                appendArr(aResult, aEle);
        }
    }
    // 声明变量赋值全局变量选择器给它
    var newVquery = $();
    // 替换当前选择器的elements,这样返回出去的东西才能使用VQuery的方法
    newVquery.elements = aResult;
 
    return newVquery;
};
 
// 返回当前对象的下标子方法
function getIndex(obj) {
    var aBrother = obj.parentNode.children;
    var i = 0;
 
    for (i = 0; i < aBrother.length; i++) {
        if (aBrother[i] == obj) {
            return i;
        }
    }
}
 
// 返回当前对象的下标
VQuery.prototype.index = function () {
 
    return getIndex(this.elements[0]);
};
 
// 阻止事件冒泡与事件默认(事件名，函数)
VQuery.prototype.bind = function (sEv, fn) {
 
    var i = 0;
 
    for (i = 0; i < this.elements.length; i++) {
 
        myAddEvent(this.elements[i], sEv, fn);
    }
};
 
 
// 加壳类似于JQuery
function $(vArg) {
    return new VQuery(vArg);
}
 
// VQuery插件机制
VQuery.prototype.extend = function (name, fn) {
    VQuery.prototype[name] = fn;
};
 
// 为VQuery添加动画函数
$().extend('animate', function (json) {
    var i = 0;
 
    for (i = 0; i < this.elements.length; i++) {
        startMove(this.elements[i], json);
    }
 
    function getStyle(obj, attr) {
        if (obj.currentStyle) {
 
            return obj.currentStyle[attr];
 
        } else {
 
            return getComputedStyle(obj, false)[attr];
        }
    }
 
    function startMove(obj, json, fn) {
        clearInterval(obj.timer);
        obj.timer = setInterval(function () {
            // 这一次运动就结束了,所有的值都到达了
            var bStop = true;
            for (var attr in json) {
                // 1.取当前的值
                var iCur = 0;
 
                if (attr == 'opacity') {
                    iCur = parseInt(parseFloat(getStyle(obj, attr)) * 100);
                } else {
                    iCur = parseInt(getStyle(obj, attr));
                }
                
                // 2.算速度
                var iSpeed = (json[attr] - iCur) / 8;
                iSpeed = iSpeed > 0 ? Math.ceil(iSpeed) : Math.floor(iSpeed);
 
                // 3.检测停止
                if (iCur != json[attr]) {
                    bStop = false;
                }
 
                if (attr == 'opacity') {
                    obj.style.filter = 'alpha(opacity:' + (iCur + iSpeed) + ')';
                    obj.style.opacity = (iCur + iSpeed) / 100;
                } else {
                    obj.style[attr] = iCur + iSpeed + 'px';
                }
            }
 
            if (bStop) {
                clearInterval(obj.timer);
                if (fn) {
                    fn();
                }
            }
        }, 30)
    }
});
 
 
// 为VQuery添加拖拽函数
$().extend('drag', function () {
    var i = 0;
 
    for (i = 0; i < this.elements.length; i++) {
        drag(this.elements[i]);
    }
 
    function drag(oDiv) {
 
        oDiv.onmousedown = function (ev) {
 
            var oEvent = ev || event;
            var disX = oEvent.clientX - oDiv.offsetLeft;
            var disY = oEvent.clientY - oDiv.offsetTop;
 
            document.onmousemove = function (ev) {
 
                var oEvent = ev || event;
                oDiv.style.left = oEvent.clientX - disX + 'px';
                oDiv.style.top = oEvent.clientY - disY + 'px';
            };
 
            document.onmouseup = function () {
                document.onmousemove = null;
                document.onmouseup = null;
            };
        };
    }
















	window.$ = function (selectorOrElement) {

            var elements;
            if (typeof selectorOrElement === "string") {
                elements = document.querySelectorAll(selectorOrElement);//伪数组，有length对象
            } else if (selectorOrElement instanceof Element) {
                elements = { 0: selectorOrElement, length: 1 };//假数组
            } else if (selectorOrElement instanceof Array) {
                elements = {};
                for (var i = 0; i < selectorOrElement.length; i++) {
                    elements[i] = selectorOrElement[i];
                }
                elements.length = selectorOrElement.length;
            }

            //添加事件
            elements.on = function (eventType, fn) {
                for (var i = 0; i < elements.length; i++) {
                    var element = elements[i];
                    if (element.addEventListener) {
                        element.addEventListener(eventType, fn);
                    } else if (element.attachEvent) {
                        element.attachEvent('on' + eventType, fn);
                    }
                }
                return elements;
            };
            //添加类
            elements.addClass = function (className) {
                for (var i = 0; elements.length; i++) {
                    if (elements[i].classList) {//其它浏览器
                        elements[i].classList.add(className);
                    } else {//IE
                        elements[i].className = elements[i].className + ' ' + className;
                    }
                }